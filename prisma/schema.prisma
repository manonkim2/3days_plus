generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @unique
  name        String
  email       String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  image_url   String?
  social      String?
  Task        Task[]
  Category    Category[]
  NewsKeyword NewsKeyword[]
  Routine     Routine[]
  RoutineLog  RoutineLog[]
  Goal        Goal[]
  Quote       Quote[]
}

model Task {
  id           Int      @id @default(autoincrement())
  content      String
  date         DateTime @default(now())
  completed    Boolean  @default(false)
  forThisMonth Boolean? @default(false) // 이번 달에 완료할 ToDo
  forToday     Boolean? @default(false) // 오늘 완료할 ToDo

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  CategoryOnTask CategoryOnTask[]
}

model Category {
  id    Int     @id @default(autoincrement())
  title String
  color String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  CategoryOnTask CategoryOnTask[]
  Task           Task[]
}

model CategoryOnTask {
  id         Int      @id @default(autoincrement())
  taskId     Int
  categoryId Int
  assignedAt DateTime @default(now())

  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([taskId, categoryId])
}

model NewsKeyword {
  id      Int    @id @default(autoincrement())
  keyword String
  userId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Routine {
  id       Int      @id @default(autoincrement())
  userId   String
  name     String
  createAt DateTime @default(now())
  color    String?

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  RoutineLog RoutineLog[]
}

model RoutineLog {
  id        Int      @id @default(autoincrement())
  userId    String
  routineId Int
  date      DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  routine Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@unique([userId, routineId, date])
}

model Goal {
  id        Int      @id @default(autoincrement())
  userId    String
  type      GoalType
  content   String
  completed Boolean  @default(false)

  year  Int
  month Int?
  week  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum GoalType {
  YEAR
  MONTH
  WEEK
}

model Quote {
  id        Int      @id @default(autoincrement())
  content   String
  author    String?
  userId    String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())

  user        User?         @relation(fields: [userId], references: [id])
  PinnedQuote PinnedQuote[]
}

model PinnedQuote {
  id        Int      @id @default(autoincrement())
  userId    String   @unique // 한 유저당 하나의 핀만 허용
  quoteId   Int
  createdAt DateTime @default(now())

  quoto Quote @relation(fields: [quoteId], references: [id])
}
