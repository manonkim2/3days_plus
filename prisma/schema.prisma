generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @unique
  name        String
  email       String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  image_url   String?
  social      String?
  Task        Task[]
  Category    Category[]
  NewsKeyword NewsKeyword[]
}

model Task {
  id           Int      @id @default(autoincrement())
  content      String
  date         DateTime @default(now())
  completed    Boolean  @default(false)
  forThisMonth Boolean? @default(false) // 이번 달에 완료할 ToDo
  forToday     Boolean? @default(false) // 오늘 완료할 ToDo

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  CategoryOnTask CategoryOnTask[]
}

model Category {
  id    Int     @id @default(autoincrement())
  title String
  color String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  CategoryOnTask CategoryOnTask[]
  Task           Task[]
}

model CategoryOnTask {
  id         Int      @id @default(autoincrement())
  taskId     Int
  categoryId Int
  assignedAt DateTime @default(now())

  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([taskId, categoryId])
}

model NewsKeyword {
  id      Int    @id @default(autoincrement())
  keyword String
  userId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
